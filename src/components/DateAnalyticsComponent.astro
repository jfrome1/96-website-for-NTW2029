---
async function getLatestCommit(slug: string) {
	try {
		const response = await fetch("https://api.github.com/repos/jfrome1/ntw2029/commits?path=src/content/docs/" 
		+ slug);
		if (!response.ok) {
			throw new Error('Network response was not ok');
		}
		const data = await response.json();
		return data[0].commit.author.date; 
	} catch (error) {
		console.error('Error fetching data:', error);
		return null;
	}
}

function formatCommitDate(dateString: string | null) {
	if (!dateString) return "Unknown";
	
	const commitDate = new Date(dateString);
	const currentDate = new Date();
	const diffTime = Math.abs(currentDate.getTime() - commitDate.getTime());
	const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
	
	if (diffDays > 30) {
		return "Older than one month";
	} else {
		return commitDate.toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' });
	}
}
---
<div>Last updated: {formatCommitDate(await getLatestCommit(Astro.props.entry.id))}</div>
<p style={{color: "var(--sl-color-gray-3)"}}>Send me questions or feedback about the website via Teams or email for class participation credit.</p>

<script>
import posthog from "posthog-js";

    const config = {
      users: [
        { id: "user1", name: "Max Hedgehog" },
        { id: "user2", name: "Alice Sparrow" },
        { id: "user3", name: "Charlie Doe" }
      ],
      cookieName: 'userPreference',
      postHogConfig: {
        apiKey: 'phc_t4s4Co4gEm9fzWcHpFUF7zWLFIwv2sR9TiXiNnY74fh',
        apiHost: 'https://us.i.posthog.com',
        personProfiles: 'identified_only'
      }
    };
    
    // Cookie handling functions
    function setCookie(name: string, value: string | number | boolean) {
      try {
        const expires = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toUTCString(); // 30 days
        document.cookie = `${name}=${encodeURIComponent(value)}; expires=${expires}; path=/; SameSite=Strict; Secure`;
      } catch (error) {
        console.error('Error setting cookie:', error);
      }
    }
    
    function getCookie(name: string) {
      try {
        return document.cookie
          .split('; ')
          .find(row => row.startsWith(`${name}=`))
          ?.split('=')[1];
      } catch (error) {
        console.error('Error reading cookie:', error);
        return null;
      }
    }
    
    // User management functions
    function getRandomUser() {
      return config.users[Math.floor(Math.random() * config.users.length)];
    }
    
    function initializeUser() {
      try {
        const savedUser = getCookie(config.cookieName);
        if (savedUser) {
          const parsedUser = JSON.parse(decodeURIComponent(savedUser));
          if (parsedUser?.id && parsedUser?.name) {
            return parsedUser;
          }
        }
        const newUser = getRandomUser();
        setCookie(config.cookieName, JSON.stringify(newUser));
        return newUser;
      } catch (error) {
        console.error('Error initializing user:', error);
        return getRandomUser();
      }
    }
    
    // Tracking functions
    // function hasUserConsent() {
    //   return false; 
    // }
    
    function initializeTracking(user: { id: string | undefined; name: any; }) {
      try {
        if (typeof posthog === 'undefined') {
          throw new Error('PostHog is not loaded');
        }
    
        posthog.init(config.postHogConfig.apiKey, {
          api_host: config.postHogConfig.apiHost,
          persistence: 'memory',
          person_profiles: 'identified_only',
        });
    
        // if (hasUserConsent()) {
          posthog.identify(user.id, {
            name: user.name,
            timestamp: new Date().toISOString()
          });
        //}
      } catch (error) {
        console.error('Error initializing tracking:', error);
      }
    }
    
    function initialize() {
      const user = initializeUser();
      console.log('Current user:', user);
      initializeTracking(user);
      return user;
    }
    
    // Usage
    const currentUser = initialize();
    </script>

<style>
  .container {
    max-width: 600px;
    width: 100%;
    margin: 0 auto;
    background-color: var(--sl-color-black);
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    flex-direction: column;
    display: flex;
    transition:
      background-color 0.3s,
      box-shadow 0.3s;
  }

  label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
  }

  textarea {
    width: 100%;
    padding: 10px;
    border: 1px solid  var(--sl-color-gray-4);
    border-radius: 4px;
    resize: vertical;
    min-height: 100px;
    box-sizing: border-box;
    transition:
      background-color 0.3s,
      color 0.3s,
      border-color 0.3s;
    background-color:  var(--sl-color-black)
    color: #f0f0f0;
    border-color: #555;
  }

  button {
    display: block;
    width: 100%;
    padding: 10px;
    background-color: var(--sl-color-accent);
    color: #ffffff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s;
  }

  button:hover {
    opacity: 0.8;
  }
  #message {
            margin-top: 20px;
            padding: 15px;
            border-radius: 4px;
            text-align: center;
            font-weight: bold;
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }

        #message.show {
            opacity: 1;
        }

        #message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        #message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
</style>
