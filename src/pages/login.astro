<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NTW2029 login page</title>
</head>
<body>
  <div class="bg-white dark:bg-black dark:text-white p-8 rounded-lg shadow-lg text-center max-w-md w-full">
    <h1 class="text-2xl font-bold text-gray-800 mb-6">Welcome to the NTW2029 login page</h1>
    <button id="loginButton" class="w-full bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition duration-300">
      Login
    </button>

  <script>
    const config = {
      cookieName: 'authUser',
      loginEndpoint: '/api/auth' 
    };

    function setCookie(name: string, value:string) {
      try {
        document.cookie = `${name}=${encodeURIComponent(value)}; max-age=${90 * 24 * 60 * 60}; path=/; SameSite=Strict; Secure`;
      } catch (error) {
        console.error('Error setting cookie:', error);
      }
    }

    function getCookie(name: string) {
      try {
        return document.cookie
          .split('; ')
          .find(row => row.startsWith(`${name}=`))
          ?.split('=')[1];
      } catch (error) {
        console.error('Error reading cookie:', error);
        return null;
      }
    }

    function deleteCookie(name:string) {
      try {
        document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; SameSite=Strict; Secure`;
      } catch (error) {
        console.error('Error deleting cookie:', error);
      }
    }

    function login() {
      try {
        const username = prompt('Enter your username:');
        const password = prompt('Enter your password:');

        if (!username || !password) {
          alert('Username and password are required.');
          return;
        }

        fetch(config.loginEndpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ username, password })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            console.log(data.user)
            setCookie(config.cookieName, JSON.stringify({ id: data.user.id, username: data.user.name }));
            alert(`Welcome, ${username}! You are now logged in.`);
            window.location.reload(); 
          } else {
            alert('Invalid username or password. Please try again.');
          }
        })
        .catch(error => {
          console.error('Error during login:', error);
          alert('An error occurred. Please try again later.');
        });

      } catch (error) {
        console.error('Error during login:', error);
        alert('An error occurred. Please try again later.');
      }
    }

    function checkLoggedInUser() {
      const savedUser = getCookie(config.cookieName);
      if (savedUser) {
        try {
          const parsedUser = JSON.parse(decodeURIComponent(savedUser));
          if (parsedUser?.id && parsedUser?.username) {
            alert(`Welcome back, ${parsedUser.username}!`);
            return true;
          }
        } catch (error) {
          console.error('Error parsing user cookie:', error);
        }
      }
      return false;
    }

    const loginButton = document.getElementById('loginButton');
    if (loginButton) {
      loginButton.addEventListener('click', login);

      if (checkLoggedInUser()) {
        loginButton.textContent = 'Logout';
        loginButton.removeEventListener('click', login);
        loginButton.addEventListener('click', () => {
          deleteCookie(config.cookieName); 
          alert('You have been logged out.');
          window.location.reload(); 
        });
      }
    }
  </script>
</body>
</html>

<style>
  /* Light mode (default) */
  body {
    background-color: #f3f4f6;
    color: #111827;
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    margin: 0;
    transition: background-color 0.3s, color 0.3s;
  }

  .container {
    background-color: #ffffff;
    padding: 2rem;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    text-align: center;
    max-width: 400px;
    width: 100%;
    transition: background-color 0.3s, box-shadow 0.3s;
  }

  h1 {
    font-size: 1.5rem;
    font-weight: bold;
    margin-bottom: 1.5rem;
  }

  button {
    background-color: #3b82f6;
    color: #ffffff;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    cursor: pointer;
    font-size: 1rem;
    width: 100%;
    transition: background-color 0.3s;
  }

  button:hover {
    background-color: #2563eb;
  }

  /* Dark mode */
  @media (prefers-color-scheme: dark) {
    body {
      background-color: #1f2937;
      color: #f3f4f6;
    }

    .container {
      background-color: #374151;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
    }

    button {
      background-color: #4f46e5;
    }

    button:hover {
      background-color: #4338ca;
    }
  }

  /* Manual dark mode toggle */
  .dark body {
    background-color: #1f2937;
    color: #f3f4f6;
  }

  .dark .container {
    background-color: #374151;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
  }

  .dark button {
    background-color: #4f46e5;
  }

  .dark button:hover {
    background-color: #4338ca;
  }

  .theme-toggle {
    position: fixed;
    top: 1rem;
    right: 1rem;
    background-color: #3b82f6;
    color: #ffffff;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    cursor: pointer;
    font-size: 0.875rem;
  }

  .theme-toggle:hover {
    background-color: #2563eb;
  }

  .dark .theme-toggle {
    background-color: #4f46e5;
  }

  .dark .theme-toggle:hover {
    background-color: #4338ca;
  }
</style>